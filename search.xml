<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>闭包</title>
      <link href="posts/f9636392/"/>
      <url>posts/f9636392/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol><li><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包:"></a>什么是闭包:</h4><p> (1). 用法: 既重用一个变量，又保护变量不被篡改的一种编程方法<br> (2). 本质: ?</p></li><li><h4 id="为什么使用闭包"><a href="#为什么使用闭包" class="headerlink" title="为什么使用闭包:"></a>为什么使用闭包:</h4><h4 id="全局变量和局部变量都有不可兼得的优缺点"><a href="#全局变量和局部变量都有不可兼得的优缺点" class="headerlink" title="全局变量和局部变量都有不可兼得的优缺点"></a>全局变量和局部变量都有不可兼得的优缺点</h4><p> (1). 全局变量: 优: 可重用，缺: 随处可以极易被污染<br> (2). 局部变量: 优: 仅函数内可用，不会被污染，缺: 不可重用！</p></li><li><h4 id="何时"><a href="#何时" class="headerlink" title="何时:"></a>何时:</h4><h4 id="如果希望让一个函数即可重用一个变量，又保护这个变量不会被篡改，都用闭包！"><a href="#如果希望让一个函数即可重用一个变量，又保护这个变量不会被篡改，都用闭包！" class="headerlink" title="如果希望让一个函数即可重用一个变量，又保护这个变量不会被篡改，都用闭包！"></a>如果希望让一个函数即可重用一个变量，又保护这个变量不会被篡改，都用闭包！</h4></li><li><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用 :"></a>如何使用 :</h4></li></ol><p>  3步: (不要问什么)<br>  (1). 定义一个外层函数包裹内层函数和要保护的变量<br>      问题: 内层函数成了外层函数内的局部函数，外部不可使用！<br>  (2). 外层函数将内层函数返回到外部！<br>      说明: 内层函数不要起名！因为反正外部接住这个内层函数后，人家还会起新的变量名。<br>      问题:函数只有调用才执行，才能获得返回结果<br>              函数不调用，就不会执行，也不会获得返回结果！<br>  (3). 想使用内层函数的人，必须调用外层函数获得内层函数！才能使用！</p>]]></content>
      
      
      <categories>
          
          <category> -- 前端 -- js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -- js -- 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mintUI</title>
      <link href="posts/d147b882/"/>
      <url>posts/d147b882/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="1-组件库基础"><a href="#1-组件库基础" class="headerlink" title="1.组件库基础"></a>1.组件库基础</h1><h2 id="1-1-什么组件"><a href="#1-1-什么组件" class="headerlink" title="1.1 什么组件?"></a>1.1 什么组件?</h2><p>组件(<code>Component</code>)是对复用的结构<code>&lt;template&gt;</code>、表现(<code>&lt;style&gt;</code>)及行为<code>&lt;script&gt;</code>的封装，其优势在于一次定义，多次使用。</p><p>组件库是由多个组件形成的完整的架构体系。</p><h2 id="1-2-组件库的分类"><a href="#1-2-组件库的分类" class="headerlink" title="1.2 组件库的分类"></a>1.2 组件库的分类</h2><p>根据组件库应用平台的不同，可以分为：</p><ul><li>移动端组件库<ul><li><code>Mint UI</code>(饿了吗) – <a href="http://mint-ui.github.io/#!/zh-cn">http://mint-ui.github.io/#!/zh-cn</a></li><li><code>Vant UI</code>(有赞)  – <a href="https://vant-contrib.gitee.io/vant/#/zh-CN/">https://vant-contrib.gitee.io/vant/#/zh-CN/</a></li><li><code>Cube UI</code>(滴滴) – <a href="https://didi.github.io/cube-ui/#/zh-CN">https://didi.github.io/cube-ui/#/zh-CN</a></li></ul></li><li>桌面端组件库<ul><li><code> Element UI</code>(饿了吗) – <a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></li><li><code>AT-UI</code>(凹凸实验室)  – <a href="https://at-ui.github.io/at-ui/">https://at-ui.github.io/at-ui/</a></li><li><code>View UI</code>(视图更新) – <a href="https://iviewui.com/">https://iviewui.com/</a> </li></ul></li></ul><blockquote><p><code>UI(User Interface)</code>，用户接口</p></blockquote><h1 id="2-Mint-UI基础"><a href="#2-Mint-UI基础" class="headerlink" title="2. Mint UI基础"></a>2. <code>Mint UI</code>基础</h1><p><code>Mint UI</code>是基于<code>Vue.js</code> 的移动端组件库。  </p><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>A.启动<code>Windows</code>操作系统的命令行，并且切换到脚手架目录</p><p>B.输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save mint-ui</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>当前脚手架安装过哪些的模块，可以在脚手架根目录下的<code>package.json</code>中进行查看</p><p><img src="C:\Users\Administrator\Desktop\第三阶段\第四阶段\14_mintUI\day01\note\note\assets\image-20201030102302381.png" alt="image-20201030102302381"></p></blockquote><h2 id="2-2-配置Mint-UI"><a href="#2-2-配置Mint-UI" class="headerlink" title="2.2 配置Mint UI"></a>2.2 配置<code>Mint UI</code></h2><p>配置<code>Mint UI</code>需要在脚手架根目录下的<code>src/main.js</code>中实现</p><p>A.在脚手架中导入所有的<code>Mint UI</code> 组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MintUI <span class="keyword">from</span> <span class="string">&#x27;mint-ui&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>B.导入样式表文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;mint-ui/lib/style.min.css&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C.通过<code>Vue.use()</code>方法将<code>Mint UI</code>注册为<code>Vue</code>的插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(MintUI);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-Mint-UI组件库的使用"><a href="#3-Mint-UI组件库的使用" class="headerlink" title="3.Mint UI组件库的使用"></a>3.<code>Mint UI</code>组件库的使用</h1><h2 id="·-Header-组件"><a href="#·-Header-组件" class="headerlink" title="· Header 组件"></a>· <code>Header</code> 组件</h2><p><code>Header</code>组件用于实现顶部导航，其语法结构是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mt-header</span> <span class="attr">title</span>=<span class="string">&quot;导航文本&quot;</span> <span class="attr">fixed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mt-header</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>fixed</code> 属性用于控制是否固定在顶部，布尔属性</p><p>在<code>&lt;mt-header&gt;</code>中可以嵌套子元素，此时必须为子元素添加<code>slot=&quot;left&quot;或slot=&quot;right&quot;</code>属性</p><p><code>slot</code>称为插槽，是预留给使用者自定义内容的区域。</p><p><img src="C:\Users\Administrator\Desktop\第三阶段\第四阶段\14_mintUI\day01\note\note\assets\image-20201030141944781.png" alt="image-20201030141944781"></p></blockquote><h2 id="·-Button-组件"><a href="#·-Button-组件" class="headerlink" title="· Button 组件"></a>· <code>Button</code> 组件</h2><p><code>Button</code>组件为按钮组件，其语法结构是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mt-button</span> <span class="attr">type</span>=<span class="string">&quot;按钮类型&quot;</span> <span class="attr">size</span>=<span class="string">&quot;尺寸&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;图标&quot;</span> <span class="attr">disabled</span> <span class="attr">plain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mt-button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>按钮类型有：<code>default</code>(默认)、<code>primary</code>(主要的)、<code>danger</code>(危险的)</p><p>按钮的尺寸有：<code>small</code>(小的)、<code>normal</code>(标准的)、<code>large</code>(大的)</p><p>图标类型有：<code>back</code>(返回)、<code>more</code>(更多)</p><p><code>disabled</code>属性用于控制按钮是否为禁用状态，布尔属性</p><p><code>plain</code>属性用于控制按钮是否为镂空按钮，布尔属性</p></blockquote><h2 id="·-Field-组件"><a href="#·-Field-组件" class="headerlink" title="· Field 组件"></a>· <code>Field</code> 组件</h2><p><code>Field</code>组件用于实现表单编辑器，其语法结构是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mt-field</span> </span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;输入框的类型&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;标签&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;占位提示内容&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">state</span>=<span class="string">&quot;状态&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:attr</span>=<span class="string">&quot;&#123;...&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">disableClear</span></span></span><br><span class="line"><span class="tag">    <span class="attr">readonly</span></span></span><br><span class="line"><span class="tag">    <span class="attr">disabled</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mt-field</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输入框的类型有：<code>text</code>、<code>password</code>、<code>textarea</code>、<code>email</code>、<code>url</code>等</p><p>状态包括：<code>success</code>(成功)、<code>error</code>(错误)、<code>warning</code>(警告)</p><p><code>:attr</code>属性用于使用<code>HTML5</code>表单组件的原生属性，<code>object</code>类型，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mt-field</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">:attr</span>=<span class="string">&quot;&#123;maxlength:10,autocomplete:&#x27;off&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">state</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mt-field</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>disableClear</code>属性用于控制是否显示清理按钮，布尔类型</p><p><img src="C:\Users\Administrator\Desktop\第三阶段\第四阶段\14_mintUI\day01\note\note\assets\image-20201030155541774.png" alt="image-20201030155541774"></p><p><code>readonly</code>属性用于控制是否只读，布尔类型</p><p><code>disabled</code>属性用于控制是否禁用，布尔类型</p><p><strong>表单实质上就是数据表结构的映射</strong></p><p><strong>新增型的表单中(如用户注册、添加配送地址等)输入框的默认值可以为空</strong></p><p><strong>修改型的表单中(如编辑个人注册信息，编辑配送地址等)输入框”必须”存在默认值</strong></p><p>新增型的表单映射为<code>SQL</code>中的<code>INSERT</code>操作，修改型的表单映射为<code>SQL</code>中的<code>UPDATE</code>操作</p></blockquote><h2 id="·-Toast-组件"><a href="#·-Toast-组件" class="headerlink" title="· Toast 组件"></a>· <code>Toast</code> 组件</h2><p><code>Toast</code>组件用于显示短消息提示框，其语法结构是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简捷语法</span></span><br><span class="line"><span class="built_in">this</span>.$toast(<span class="string">&quot;提示内容&quot;</span>)</span><br><span class="line"><span class="comment">//标准语法</span></span><br><span class="line"><span class="built_in">this</span>.$toast(&#123;</span><br><span class="line">    <span class="attr">message</span>:<span class="string">&quot;提示内容&quot;</span>,</span><br><span class="line">    <span class="attr">position</span>:<span class="string">&quot;位置(top|middle|bottom)&quot;</span>,</span><br><span class="line">    <span class="attr">duration</span>:持续时长(3000ms) -- 数值类型</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"><span class="function"><span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.$toast(&#123;</span><br><span class="line"><span class="attr">message</span>:<span class="string">&quot;错误提示&quot;</span>,</span><br><span class="line"><span class="attr">duration</span>:<span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就先到这了!!!</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> mintUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mintUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm2</title>
      <link href="posts/b6c87316/"/>
      <url>posts/b6c87316/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="解决【npm-ERR-Unexpected-end-of-JSON-input-while-parsing-near-‘…sh-time”-141072930277’】方案"><a href="#解决【npm-ERR-Unexpected-end-of-JSON-input-while-parsing-near-‘…sh-time”-141072930277’】方案" class="headerlink" title="解决【npm ERR! Unexpected end of JSON input while parsing near ‘…sh_time”:141072930277’】方案"></a>解决【npm ERR! Unexpected end of JSON input while parsing near ‘…sh_time”:141072930277’】方案</h2><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>执行<code>npm install</code>的时候报错<code>npm ERR! Unexpected end of JSON input while parsing near &#39;...sh_time&quot;:141072930277&#39;</code>.如下图：</p><p><img src="https://img-blog.csdnimg.cn/20181130110235884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbml1c195eW0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><p>直接执行 <code>npm cache clean --force</code>, 如果执行成功，再<code>npm install</code>即可。</p></li><li><p>如果执行失败，请先升级npm，即<code>npm i -g npm</code>, 最后再执行<code>npm cache clean --force</code>, 最后再<code>npm install</code>.</p></li><li><p>如果还执行失败，那就先<code>npm cache verify</code>,再<code>npm cache clean --force</code>，最后再<code>npm install</code>。</p></li><li><p>如果还是执行失败，那么恭喜你，跟我一样了。我也是这样走到这一步的。<strong>那就往复的执行 【先<code>npm cache clean --force</code>再<code>npm install</code>】</strong>，一直到<code>npm cache clean --force</code>执行成功即可，然后<code>npm install</code>即成功。</p></li></ol><h5 id="重点-别忘了，往复的执行-【先npm-cache-clean-force再npm-install】"><a href="#重点-别忘了，往复的执行-【先npm-cache-clean-force再npm-install】" class="headerlink" title="重点:别忘了，往复的执行 【先npm cache clean --force再npm install】"></a>重点:别忘了，往复的执行 【先<code>npm cache clean --force</code>再<code>npm install</code>】</h5>]]></content>
      
      
      <categories>
          
          <category> 管理器 </category>
          
          <category> nvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm1</title>
      <link href="posts/2fc122ac/"/>
      <url>posts/2fc122ac/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="npm与cnpm的区别"><a href="#npm与cnpm的区别" class="headerlink" title="npm与cnpm的区别"></a>npm与cnpm的区别</h1><p>NPM（Node Package Manager，节点包管理器）是NodeJS的包管理器，用于节点插件的管理（包括安装，卸载和管理依赖等）。NPM是随同新版的NodeJS一起安装的包管理工具，所以我们需要安装NodeJS。</p><h4 id="NPM的常见使用场景"><a href="#NPM的常见使用场景" class="headerlink" title="NPM的常见使用场景"></a>NPM的常见使用场景</h4><p>1.允许用户从NPM服务器上下载别人编写的第三方包到本地使用。</p><p>2.允许用户从NPM服务器上下载并安装别人编写的命令行程序到本地使用。</p><p>3.允许用户将自己编写的包或命令行程序上传到NPM服务器上供别人使用。</p><h4 id="为什么要用CNPM"><a href="#为什么要用CNPM" class="headerlink" title="为什么要用CNPM"></a>为什么要用CNPM</h4><p>NMP安装插件是从NPM官网下载对应的插件包，该网站的服务器在国外，经常会出现下载缓慢或出现异常，这时便需要找到另外的方法提供稳定的下载，这个方法就是CNPM。阿里巴巴的淘宝团队把NMP官网的插件都同步到了在中国的服务器，提供给我们从这个服务器上稳定下载资源。</p><p>CNMP同样是NMP的一个插件，要安装的话需要在CMD命令行控制台执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装完成后可以使用cnpm -v命令查看版本号，要使用cnmp命令的话最好在安装后重新打开CMD命令行控制台。</p><p>cnpm的用法和npm的用法一致，只是在执行命令的时候将npm改为cnpm</p>]]></content>
      
      
      <categories>
          
          <category> 管理器 </category>
          
          <category> nvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解python</title>
      <link href="posts/46c200b1/"/>
      <url>posts/46c200b1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><ul><li>什么是python?<ul><li>是一门编程语言. 与 JavaScript 相同</li></ul></li><li>做什么?<ul><li>人工智能</li><li>爬虫</li><li>服务器</li></ul></li><li>为什么要学?<ul><li>目前语言热度高:   tiobe 语言排行榜中 第三名!</li><li>学习简单:  语法 与 js 极其相似, 学习成本低</li></ul></li><li>最终目标:  <ul><li>使用python语言 制作网站接口服务器,  搭配 vue 实现一个网站:   <strong>全栈开发</strong></li></ul></li></ul><h2 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h2><p>官方网站: <code>https://www.python.org/</code></p><p>目前python的版本:</p><ul><li>2.7:  好多旧项目使用的2.7</li><li>3.8:  新项目使用3.8</li></ul><p>这两个版本不兼容:  所书写的代码互相无法识别</p><p>下载地址: <code>https://www.python.org/downloads/release/python-385/</code></p><p>安装:  </p><p><img src="https://web1910-1301510526.cos.ap-beijing.myqcloud.com/image-20200911091720111.png" alt="image-20200911091720111"></p><p>测试:    在命令行执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure><p><img src="https://web1910-1301510526.cos.ap-beijing.myqcloud.com/image-20200911092200024.png" alt="image-20200911092200024"></p><p>为什么要安装python软件</p><ul><li>python书写的代码是人能看懂的, 但是计算机无法识别;  计算机只能识别2进制的代码;</li><li>官方提供的软件 就可以把 我们书写的代码  转为 二进制的代码 运行到计算机上!</li></ul><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript文件的后缀名是 .js</span></span><br><span class="line"><span class="comment"># python文件的后缀名  .py</span></span><br><span class="line"><span class="comment"># js的注释符号是 // </span></span><br><span class="line"><span class="comment"># py的注释符号是 #   快捷键 ctrl+/</span></span><br><span class="line"><span class="comment"># 打印: print</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行:</span></span><br><span class="line"><span class="comment">#nodejs中执行是node 01.js</span></span><br><span class="line"><span class="comment"># windows: py 01.py</span></span><br><span class="line"><span class="comment"># mac: python3 01.py</span></span><br><span class="line"><span class="comment"># 注意:命令行必须在 文件所在目录下 打开; 这样路径才是对的</span></span><br></pre></td></tr></table></figure><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input() 函数: 通过cmd 收集用户录入的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书写起来 类似于 js 的非严格模式</span></span><br><span class="line"><span class="comment"># 非严格模式: 1.变量不用声明  2.不用分号结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># js中:  let name = &#x27;xxx&#x27;;</span></span><br><span class="line"><span class="comment"># py中: 没有 let var const 这些关键词</span></span><br><span class="line">name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input(): 输出一串文本 到cmd, 并且接收用户录入的内容 作为返回值</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请告知您的姓名:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;欢迎,&#x27;</span>, name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="posts/f76efcad/"/>
      <url>posts/f76efcad/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="nvm常见命令"><a href="#nvm常见命令" class="headerlink" title="nvm常见命令"></a>nvm常见命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm nvm list</span><br></pre></td></tr></table></figure><p>是查找本电脑上所有的node版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure><p> 查看已经安装的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list installed</span><br></pre></td></tr></table></figure><p> 查看已经安装的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p> 查看网络可以安装的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install</span><br></pre></td></tr></table></figure><p> 安装最新版本nvm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure><p>切换使用指定的版本node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls </span><br></pre></td></tr></table></figure><p>列出所有版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure><p>显示当前版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias &lt;name&gt; &lt;version&gt;</span><br></pre></td></tr></table></figure><p> 给不同的版本号添加别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm unalias &lt;name&gt;</span><br></pre></td></tr></table></figure><p> 删除已定义的别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm reinstall-packages &lt;version&gt;</span><br></pre></td></tr></table></figure><p>  在当前版本node环境下，重新全局安装指定版本号的npm包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm on</span><br></pre></td></tr></table></figure><p> 打开nodejs控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm off</span><br></pre></td></tr></table></figure><p> 关闭nodejs控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm proxy </span><br></pre></td></tr></table></figure><p>查看设置与代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror [url] </span><br></pre></td></tr></table></figure><p>设置或者查看setting.txt中的node_mirror，如果不设置的默认是 <a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a>　</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm npm_mirror [url] </span><br></pre></td></tr></table></figure><p>设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： <a href="https://github.com/npm/npm/archive/">https://github.com/npm/npm/archive/</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure><p> 卸载制定的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use [version] [arch]</span><br></pre></td></tr></table></figure><p> 切换制定的node版本和位数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm root [path]</span><br></pre></td></tr></table></figure><p> 设置和查看root路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br></pre></td></tr></table></figure><p> 查看当前的版本</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盗墓笔记</title>
      <link href="posts/8d00dd1/"/>
      <url>posts/8d00dd1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近《终极笔记》热播，看剧不过瘾之余又回去刷了一遍小说和《藏海花》，终于发现《盗墓笔记》中“隐藏的秘密”，很多三叔挖的坑都可以自行脑补。现在稻米们最关心的问题应该有:</p><p>问题一.小哥的秘密：来历和失忆症。</p><p>问题二.终极是什么？</p><p>问题三.长生之谜。</p><p>可能还有一些细枝末节的问题，搞懂上面几个问题后都可以迎刃而解。</p><p>———————我是分割线————————</p><p>首先，《盗墓笔记》系列并不是一部奇幻小说，它不像《鬼吹灯》系列，关于盗墓的“知识”方面并不多，它其实是一部披着“盗墓”外衣的科幻小说！如果把一个个古墓换成一个个空间裂隙，《盗墓笔记》改名叫《时空探险笔记》，那小说内容迷惑性将会大大降低。</p><p>小哥的秘密是什么？百度百科中有这么一段描述，“作者南派三叔在访谈中提到，小哥是全书中最善良智慧神秘强大的角色。此外，在盗笔原文中，小哥数十年间一直保持着年轻的容貌，据作者称其为“长生的完整体”，故不会发生诸如“尸变”之类的长生后遗症，可谓是完美的长生者。</p><p>其全名中“起灵”二字，在古代有撤除亡者灵位之意，且张家历代族长皆称“张起灵”，由此推测张家族长亦负责将亡故的族人入殓于张家古楼之中。（且负责群葬的迁徙）</p><p>神秘的张家人世代守护长白山青铜门和“终极”的秘密，因前任族长在家族内斗中身亡，导致族长交接出现断代。又因祖传的失魂症，张起灵每隔一段时间就会遗忘过去，因此他在接任族长后只能不断穿梭于各大古墓中寻找缺失的线索和记忆，在延续千年的迷局中摸索前行。”</p><p>小哥为何会长生？其实，小哥并非长生，而是因为小哥是时空穿梭者，准确点说小哥是穿梭在不同时期的空间裂隙中，在古墓中，没有时间的概念，古墓外时间是线性的，而古墓是独立于时间的存在，所以小哥通过不同的古墓可以游历不同的时空，被不同时期的人所发现。同时，由于小哥的穿越，他也极有可能同时存在于一个时间点上不同的地方，一个是当下时空的小哥，另一个是不同时空穿梭来的小哥。这也可以顺理成章的解释小哥的失魂症，小哥并非失忆，只是在进行时空穿梭后，不同的时空造成小哥不清楚自己处于哪个时间点，是过去还是未来，从而造成记忆的碎片化。例子就在是极海听雷中只能向前的通道，中途点亮蜡烛就可以出去的古墓，通过这个古墓通道可以到达不同的时空。</p><p>青铜门的秘密，青铜门后是不同的空间维度，进入后可以选择不同的时空出来，所以小哥可以在长白山下的青铜门进去，又能在喜马拉雅山下的青铜门出来(藏海花)，青铜门中的时空每十年会轮回一次，所以小哥和吴邪定下了十年之约，让吴邪来接他的好处就是方便小哥重组记忆，想详细了解青铜门的可以去百度一下虫洞。</p><p>长生的秘密，上面说到长生其实就是时空穿梭，但副作用是一旦进行过时空穿梭，就不能在某一时空停留过长时间，如果超过时限则生物会发生变异，所以青铜门附近的怪事最多，变异的生物也最多。但可以通过进入玉俑的方法控制住变异，这个方法涉及量子理论，可自行百度“薛定谔的猫”。</p><p>小哥不断穿梭时空到底在干嘛？三叔给张家的定位是守护者，相对汪家的定位则是破坏者，张家在不断消灭时空穿梭的经历者(粽子)和线索，而汪家则在不断留下各类线索和探索更多时空穿梭的方法（青铜门，西王母陨石和听雷），小哥所过之处基本会毁掉汪家留下的各类线索和粽子。开个脑洞:小哥应该来自于未来的某个时空，在那个时空由于汪家的破坏时空的稳定受到了极大的伤害，小哥作为守护者不得不进行拨乱反正，顺着汪家留下的各类线索一一追踪过去，使汪家设的局不能在某一个时间点同时发作给时空稳定性造成破坏，所以小哥经常念叨着，时间不多了(我还要通过青铜门去下一站)。</p><p>如果说《三体》是中国最好的硬科幻文学，那《盗墓笔记》就是中国最好的软科幻故事</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱好 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloworld</title>
      <link href="posts/52691/"/>
      <url>posts/52691/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>纪念一下开始喽!!!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爱好 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
